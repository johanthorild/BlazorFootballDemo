@page "/fetchdata"
@using System.Text.Json;
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS

<PageTitle>Live matches</PageTitle>

@if (FixtureData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (FixtureData.Errors.Any())
    {
        <MudAlert Severity="Severity.Error">
            <MudStack Row="false">
                @foreach (var error in FixtureData.Errors)
                {
                    <p>error</p>
                }
            </MudStack>
        </MudAlert>
    }
    else {
        <MudStack>
            @foreach (var fixture in FixtureData.Response)
            {
                <MudPaper Class="pa-3">
                    <MudStack>
                        <h4>@fixture.League.Name</h4>
                        <p>Country: @fixture.League.Country</p>
                        <p>Fixture Date: @fixture.Fixture.Date.ToString("yyyy-MM-dd HH:mm")</p>
                        <p>Status: @fixture.Fixture.Status.Long</p>
                        <p>Home Team: @fixture.Teams.Home.Name</p>
                        <p>Away Team: @fixture.Teams.Away.Name</p>
                        <p>Goals: @fixture.Goals.Home - @fixture.Goals.Away</p>
                    </MudStack>
                </MudPaper>
            }
        </MudStack>
    }
}

@code {
    private FixtureResponse? FixtureData { get; set;}
    private string TodaysDate => DateTime.Now.ToString("yyyy-MM-dd");
    protected override async Task OnInitializedAsync()
    {
        var fixturesFromLocalStorage = await GetLocalStorageItem(TodaysDate);
        if (fixturesFromLocalStorage == null)
        {
            Console.WriteLine("Nothing from local storage.");
            await GetTodaysFixtures();
            await SetLocalStorageItem(JsonSerializer.Serialize(FixtureData));
        }
        else
        {
            Console.WriteLine("Found todays fixtures in local storage.");
            FixtureData = DeserializeObjectToFixtureResponse(fixturesFromLocalStorage);
        }
    }

    private async Task GetTodaysFixtures()
    {
        Console.WriteLine("Getting todays fixtures..");
        var client = HttpClientFactory.CreateClient("FootballApiClient");
        FixtureData = await client.GetFromJsonAsync<FixtureResponse>(
            $"fixtures?league=39&season=2023&date={TodaysDate}");
    }

    private FixtureResponse? DeserializeObjectToFixtureResponse(object sourceObject)
    {
        Console.WriteLine("Deserialize the object..");

        try
        {
            string json = JsonSerializer.Serialize(sourceObject);
            Console.WriteLine("json empty: " + !json.Any());
            return JsonSerializer.Deserialize<FixtureResponse>(json) ?? null;
        }
        catch (JsonException ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }
    }

    private async Task<object> GetLocalStorageItem(string key) =>
        await JS.InvokeAsync<object>("localStorage.getItem", key);

    private async Task SetLocalStorageItem(object data) =>
        await JS.InvokeVoidAsync("localStorage.setItem", TodaysDate, data);


    public class FixtureResponse
    {
        public string? Get { get; set; }
        public Parameters Parameters { get; set; }
        public List<object>? Errors { get; set; }
        public int? Results { get; set; }
        public Paging Paging { get; set; }
        public List<FixtureItem>? Response { get; set; }
    }

    public class Parameters
    {
        public string? Live { get; set; }
    }

    public class Paging
    {
        public int? Current { get; set; }
        public int? Total { get; set; }
    }

    public class FixtureItem
    {
        public Fixture Fixture { get; set; }
        public League League { get; set; }
        public Teams Teams { get; set; }
        public Goals Goals { get; set; }
        public Score Score { get; set; }
    }

    public class Fixture
    {
        public int? Id { get; set; }
        public object? Referee { get; set; }
        public string? Timezone { get; set; }
        public DateTime Date { get; set; }
        public int? Timestamp { get; set; }
        public Periods Periods { get; set; }
        public Venue Venue { get; set; }
        public Status Status { get; set; }
    }

    public class Periods
    {
        public int? First { get; set; }
        public object? Second { get; set; }
    }

    public class Venue
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? City { get; set; }
    }

    public class Status
    {
        public string? Long { get; set; }
        public string? Short { get; set; }
        public int? Elapsed { get; set; }
    }

    public class League
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Country { get; set; }
        public string? Logo { get; set; }
        public string? Flag { get; set; }
        public int? Season { get; set; }
        public string? Round { get; set; }
    }

    public class Teams
    {
        public TeamInfo Home { get; set; }
        public TeamInfo Away { get; set; }
    }

    public class TeamInfo
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Logo { get; set; }
        public bool? Winner { get; set; }
    }

    public class Goals
    {
        public int? Home { get; set; }
        public int? Away { get; set; }
    }

    public class Score
    {
        public ScoreInfo Halftime { get; set; }
        public ScoreInfo Fulltime { get; set; }
        public ScoreInfo Extratime { get; set; }
        public ScoreInfo Penalty { get; set; }
    }

    public class ScoreInfo
    {
        public int? Home { get; set; }
        public int? Away { get; set; }
    }
}
