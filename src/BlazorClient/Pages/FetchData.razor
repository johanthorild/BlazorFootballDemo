@page "/todaysfixtures"
@using System.Text.Json;
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS

<PageTitle>Todays fixtures</PageTitle>

<MudText Typo="Typo.h4">Todays fixtures</MudText>
<MudDivider Class="my-4"/>

@if (FixtureData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (FixtureData.Errors.Any())
    {
        <MudAlert Severity="Severity.Error">
            <MudStack Row="false">
                @foreach (var error in FixtureData.Errors)
                {
                    <p>error</p>
                }
            </MudStack>
        </MudAlert>
    }
    else {
        <MudStack>
            @foreach (var fixture in FixtureData.Response.OrderBy(x => x.Fixture.Date))
            {
                <MudPaper Class="pa-3">
                    <MudStack Row="true" Justify="Justify.SpaceEvenly">
                        <MudPaper Class="pa-2" Elevation="0">
                            <MudStack AlignItems="AlignItems.Center">
                                <MudImage Src=@fixture.Teams.Home.Logo Height="100"></MudImage>
                                <MudText Typo="Typo.caption">@fixture.Teams.Home.Name</MudText>
                            </MudStack>
                        </MudPaper>
                        <MudPaper Class="pa-2" MinWidth="120" MaxWidth="120">
                            <MudStack AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.body2">@fixture.Fixture.Date.ToString("HH:mm")</MudText>
                                <MudText Typo="Typo.body2">@fixture.Fixture.Venue.Name</MudText>
                                <MudText Typo="Typo.body2" class="mb-2">@fixture.Fixture.Referee</MudText>
                                
                                @switch (fixture.Fixture.Status.Short)
                                {
                                    case "NS":
                                    case "FT":
                                        <MudAlert Severity="Severity.Normal" NoIcon="true">@fixture.Fixture.Status.Long</MudAlert>
                                        break;
                                    default:
                                        <MudAlert Severity="Severity.Error" NoIcon="true">@fixture.Fixture.Status.Long</MudAlert>
                                        break;
                                }
                            </MudStack>
                        </MudPaper>
                        <MudPaper Class="pa-2" Elevation="0">
                            <MudStack AlignItems="AlignItems.Center">
                                <MudImage Src=@fixture.Teams.Away.Logo Height="100"></MudImage>
                                <MudText Typo="Typo.caption">@fixture.Teams.Away.Name</MudText>
                            </MudStack>
                        </MudPaper>
                    </MudStack>
                </MudPaper>
            }
        </MudStack>
    }
}

@code {
    private FixtureResponse? FixtureData { get; set;}
    private string TodaysDate => DateTime.Now.ToString("yyyy-MM-dd");
    protected override async Task OnInitializedAsync()
    {
        var fixturesFromLocalStorage = await GetLocalStorageItem(TodaysDate);
        if (fixturesFromLocalStorage == null)
        {
            Console.WriteLine("Nothing from local storage.");
            await GetTodaysFixtures();
            await SetLocalStorageItem(JsonSerializer.Serialize(FixtureData));
        }
        else
        {
            Console.WriteLine("Found todays fixtures in local storage.");
            FixtureData = JsonSerializer.Deserialize<FixtureResponse>(fixturesFromLocalStorage, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            });
        }
    }

    private async Task GetTodaysFixtures()
    {
        Console.WriteLine("Getting todays fixtures..");
        var client = HttpClientFactory.CreateClient("FootballApiClient");
        FixtureData = await client.GetFromJsonAsync<FixtureResponse>(
            $"fixtures?league=39&season=2023&date={TodaysDate}");
    }

    private async Task<string?> GetLocalStorageItem(string key) =>
        await JS.InvokeAsync<string?>("localStorage.getItem", key);

    private async Task SetLocalStorageItem(string data) =>
        await JS.InvokeVoidAsync("localStorage.setItem", TodaysDate, data);

    public class FixtureResponse
    {
        public string? Get { get; set; }
        public Parameters Parameters { get; set; }
        public List<object> Errors { get; set; } = new();
        public int? Results { get; set; }
        public Paging Paging { get; set; }
        public List<FixtureItem> Response { get; set; } = new();
    }

    public class Parameters
    {
        public string? Live { get; set; }
    }

    public class Paging
    {
        public int? Current { get; set; }
        public int? Total { get; set; }
    }

    public class FixtureItem
    {
        public Fixture Fixture { get; set; }
        public League League { get; set; }
        public Teams Teams { get; set; }
        public Goals Goals { get; set; }
        public Score Score { get; set; }
    }

    public class Fixture
    {
        public int? Id { get; set; }
        public object? Referee { get; set; }
        public string? Timezone { get; set; }
        public DateTime Date { get; set; }
        public int? Timestamp { get; set; }
        public Periods Periods { get; set; }
        public Venue Venue { get; set; }
        public Status Status { get; set; }
    }

    public class Periods
    {
        public int? First { get; set; }
        public object? Second { get; set; }
    }

    public class Venue
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? City { get; set; }
    }

    public class Status
    {
        public string? Long { get; set; }
        public string? Short { get; set; }
        public int? Elapsed { get; set; }
    }

    public class League
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Country { get; set; }
        public string? Logo { get; set; }
        public string? Flag { get; set; }
        public int? Season { get; set; }
        public string? Round { get; set; }
    }

    public class Teams
    {
        public TeamInfo Home { get; set; }
        public TeamInfo Away { get; set; }
    }

    public class TeamInfo
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Logo { get; set; }
        public bool? Winner { get; set; }
    }

    public class Goals
    {
        public int? Home { get; set; }
        public int? Away { get; set; }
    }

    public class Score
    {
        public ScoreInfo Halftime { get; set; }
        public ScoreInfo Fulltime { get; set; }
        public ScoreInfo Extratime { get; set; }
        public ScoreInfo Penalty { get; set; }
    }

    public class ScoreInfo
    {
        public int? Home { get; set; }
        public int? Away { get; set; }
    }
}
